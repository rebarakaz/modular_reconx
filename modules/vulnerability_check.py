import os
import requests
from typing import Dict, Any, List

VULNERS_API_URL = "https://vulners.com/api/v3/search/bulletin/"


def check_vulnerabilities(tech_info: Dict[str, List[str]]) -> Dict[str, Any]:
    """
    Checks for vulnerabilities in detected software versions using the Vulners API.
    """
    api_key = os.getenv("VULNERS_API_KEY")
    if not api_key:
        return {"error": "VULNERS_API_KEY is not set. Get a free key from vulners.com."}

    vulnerabilities = {}
    technologies_to_scan = []

    # Extract technologies and versions from builtwith results
    for category in tech_info.values():
        for tech_string in category:
            # e.g., "jQuery/1.12.4" or "Apache/2.4.29 (Ubuntu)"
            if "/" in tech_string:
                name, rest = tech_string.split("/", 1)
                version = rest.split(" ")[0]  # take only the version part
                technologies_to_scan.append(
                    {"name": name.strip().lower(), "version": version.strip()}
                )

    if not technologies_to_scan:
        return {"note": "No technologies with version numbers found to scan."}

    for tech in technologies_to_scan:
        query = f"affectedSoftware.name:{tech['name']} AND affectedSoftware.version:{tech['version']}"
        params = {"query": query, "apiKey": api_key, "size": 5}
        try:
            response = requests.get(VULNERS_API_URL, params=params, timeout=15)
            response.raise_for_status()
            data = response.json()

            if data.get("data", {}).get("total", 0) > 0:
                found_vulns = []
                for bulletin in data.get("data", {}).get("search", []):
                    source = bulletin.get("_source", {})
                    vuln = {
                        "id": source.get("id"),
                        "title": source.get("title"),
                        "cvss_score": source.get("cvss", {}).get("score", "N/A"),
                        "href": source.get("href"),
                    }
                    found_vulns.append(vuln)
                vulnerabilities[f"{tech['name']}/{tech['version']}"] = found_vulns
        except requests.exceptions.RequestException as e:
            vulnerabilities[tech["name"]] = {"error": f"API request failed: {e}"}

    return (
        vulnerabilities
        if vulnerabilities
        else {"note": "No vulnerabilities found for detected technologies."}
    )
